plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("com.google.devtools.ksp")
    id("kotlin-parcelize")
    id("kotlin-kapt")
    id("kotlinx-serialization")
    id("dagger.hilt.android.plugin")
    id("androidx.navigation.safeargs.kotlin")
}

def versionMajor = 1
def versionMinor = 1
def versionPatch = 0

android {
    namespace 'com.mooncascade'
    compileSdk 32

    defaultConfig {
        applicationId "com.mooncascade"
        minSdk 21
        targetSdk 32
        versionCode versionMajor * 10000 + versionMinor * 100 + versionPatch
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        setProperty("archivesBaseName", "Weather-Forecast-$versionName")

        testInstrumentationRunner "com.mooncascade.CustomTestRunner"


        vectorDrawables {
            useSupportLibrary true
        }

        buildConfigField "String", "API_BASE_URL", "${API_BASE_URL}"
        buildConfigField "String", "API_MEDIA_BASE_URL", "${API_MEDIA_BASE_URL}"
    }

    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword MYAPP_RELEASE_STORE_PASSWORD
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword MYAPP_RELEASE_KEY_PASSWORD
            }
        }
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
        freeCompilerArgs += [
                "-Xcontext-receivers"
        ]
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {

    implementation("androidx.core:core-ktx:$coreVersion")
    implementation("androidx.appcompat:appcompat:$appcompatVersion")
    implementation("com.google.android.material:material:$materialVersion")
    implementation("androidx.constraintlayout:constraintlayout:$constraintlayoutVersion")
    implementation("androidx.activity:activity-ktx:$activityVersion")
    implementation("androidx.fragment:fragment-ktx:$fragmentVersion")
    implementation("androidx.recyclerview:recyclerview:$recyclerviewVersion")
    implementation("androidx.swiperefreshlayout:swiperefreshlayout:$swiperefreshlayoutVersion")
    implementation("androidx.annotation:annotation:$annotationVersion")
    implementation("com.google.devtools.ksp:symbol-processing-api:$kspVersion")


    //region LifeCycle
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion")
    implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion")
    //endregion


    //region Dependency Injection
    implementation("com.google.dagger:hilt-android:$hiltVersion")
    kapt("com.google.dagger:hilt-compiler:$hiltVersion")
    androidTestImplementation("com.google.dagger:hilt-android-testing:$hiltVersion")
    kaptAndroidTest("com.google.dagger:hilt-android-compiler:$hiltVersion")
    //endregion

    //region Navigation
    implementation("androidx.navigation:navigation-runtime-ktx:$navigationVersion")
    implementation("androidx.navigation:navigation-ui-ktx:$navigationVersion")
    implementation("androidx.navigation:navigation-fragment-ktx:$navigationVersion")
    androidTestImplementation("androidx.navigation:navigation-testing:$navigationVersion")
    //endregion

    //region Coroutines
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutinesVersion")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutinesVersion")
    testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutinesVersion")
    //endregion

    //region Retrofit
    implementation("com.squareup.retrofit2:retrofit:$retrofitVersion")
    implementation("com.squareup.retrofit2:converter-moshi:$retrofitVersion")
    implementation("com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:$retrofitSerializationVersion")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttpVersion")
    implementation("com.squareup.moshi:moshi-kotlin:$moshiVersion")
    ksp("com.squareup.moshi:moshi-kotlin-codegen:$moshiVersion")
    //endregion

    //region Room
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$serializationVersion")
    //endregion

    //region DB
    implementation("androidx.room:room-runtime:$roomVersion")
    ksp("androidx.room:room-compiler:$roomVersion")
    implementation("androidx.room:room-ktx:$roomVersion")
    implementation("androidx.room:room-paging:$roomVersion")
    testImplementation("androidx.room:room-testing:$roomVersion")
    //endregion


    //region Paging
    implementation("androidx.paging:paging-runtime-ktx:$pagingVersion")
    //endregion


    // region Jetpack DataStore
    implementation("androidx.datastore:datastore-preferences:$datastoreVersion")
    //endregion

    //region Coil (Coroutines Based ImageLoader)
    implementation("io.coil-kt:coil:$coilVersion")
    //endregion


    // region Animation
    implementation("com.airbnb.android:lottie:$lottieVersion")
    //endregion


    //region Size
    implementation("com.intuit.sdp:sdp-android:$scaleVersion")
    implementation("com.intuit.ssp:ssp-android:$scaleVersion")
    //endregion


    // region Android Local Test
    testImplementation("junit:junit:$junitVersion")
    testImplementation("org.mockito:mockito-core:$mockitoVersion")
    testImplementation("org.mockito:mockito-inline:$mockitoVersion")
    testImplementation("androidx.test:core:$testCoreVersion")
    testImplementation("com.squareup.okhttp3:mockwebserver:$okhttpVersion")
    testImplementation("app.cash.turbine:turbine:$turbinVersion")
    testImplementation("org.robolectric:robolectric:$robolectricVersion")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:$mockitoKotlinVersion")
    testImplementation("io.mockk:mockk:$mockkVersion")
    testImplementation("io.mockk:mockk-common:$mockkVersion")
    testImplementation("io.mockk:mockk-agent-jvm:$mockkVersion")
    //endregion

    //region Instrumental Testing
    androidTestImplementation("androidx.test:runner:$testRunnerVersion")
    androidTestImplementation("androidx.test:rules:$testRulesVersion")
    androidTestImplementation("androidx.test.ext:junit:$junitExtVersion")
    androidTestImplementation("org.mockito:mockito-core:$mockitoVersion")
    androidTestImplementation("androidx.arch.core:core-testing:$coreTestingVersion")
    androidTestImplementation("io.mockk:mockk-android:$mockkVersion")


    //Espresso Instrumented Testing
    implementation("androidx.test.espresso:espresso-idling-resource:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-core:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:$espressoVersion")
    androidTestImplementation("androidx.test.espresso:espresso-intents:$espressoVersion")
    androidTestImplementation("androidx.test.espresso.idling:idling-concurrent:$espressoVersion")


    androidTestImplementation("com.google.android.material:material:$materialVersion")
    androidTestImplementation("androidx.appcompat:appcompat:$appcompatVersion")
    androidTestImplementation("androidx.recyclerview:recyclerview:$recyclerviewVersion")
    androidTestImplementation("com.google.truth:truth:$truthVersion")
    debugImplementation("androidx.fragment:fragment-testing:$fragmentVersion")
    testImplementation("org.testng:testng:$testingVersion")
    testImplementation("androidx.room:room-testing:$roomVersion")
    //endregion

}